scalar Time

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type SrcRSSFeed {
  id: ID!
  title: String!
  description: String
  link: String!
  feedLink: String!
  updated: Time!
  lastFetchedAt: Time!
  language: String
  generator: String
  contentItems: [ContentItem!]!
}

type ContentItem {
  id: ID!
  sourceID: ID!
  sourceTitle: String!
  sourceLink: String!
  title: String!
  description: String!
  content: String!
  link: String!
  updated: Time
  published: Time
  author: String
  guid: String
  imageTitle: String
  imageURL: String
  sourceType: String!
}

type UserSubscription {
  id: ID!
  userID: ID!
  srcRSSFeed: ID!
  createdAt: Time!
}

type UserFeed {
  userID: String!
  name: String!
  contentItems: [ContentItem!]!
}

type User {
  id: ID!
  firstname: String!
  lastname: String!
  username: String!
  email: String!
  password: String!
  feed: UserFeed!
  createdAt: Time!
  updatedAt: Time!
  srcRSSFeeds: [SrcRSSFeed!]!
}

input SrcRSSFeedInput {
  id: ID
  link: String
  feedLink: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  firstname: String!
  lastname: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Query {
  srcRSSFeed(input: SrcRSSFeedInput): SrcRSSFeed!
  userFeed: UserFeed!
}

type Mutation {
  addSrcRSSFeed(feedLink: String!): SrcRSSFeed!
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
}
