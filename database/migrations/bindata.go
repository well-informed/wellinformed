// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// database/migrations/000001_init_schema.down.sql
// database/migrations/000001_init_schema.up.sql
// database/migrations/000002_divide_interaction_read_state.down.sql
// database/migrations/000002_divide_interaction_read_state.up.sql
// database/migrations/000003_rename_prefSet_to_engine.down.sql
// database/migrations/000003_rename_prefSet_to_engine.up.sql
// database/migrations/bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xf0\xcb\x57\x28\x4a\x4d\x2c\xce\xcf\x53\x28\xc9\x57\x48\x2d\x4b\x2d\x52\x48\xc9\x57\x28\xc9\xc8\x2c\x06\x04\x00\x00\xff\xff\xc1\x36\x17\xc2\x1c\x00\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcf\x8e\x9b\x3c\x10\x3f\x7f\x3c\xc5\x1c\x13\x29\x6f\xb0\xa7\xec\xca\xfb\x09\x35\x4d\x5b\x92\x48\xdd\x93\xe5\xb5\x27\x89\x55\x30\x68\x3c\xec\x4a\x7d\xfa\xca\x84\x10\xd8\x1a\xc8\x1e\x7a\xc4\xf3\x1b\xd9\xbf\x3f\x33\x00\x3c\x65\x62\xbd\x17\xb0\x5f\x3f\x6e\x04\xa4\xcf\xb0\xfd\xb6\x07\xf1\x33\xdd\xed\x77\x50\x7b\x24\x9f\x2c\xc0\x1a\x78\x4c\xff\xdf\x89\x2c\x5d\x6f\xe0\x7b\x96\x7e\x5d\x67\x2f\xf0\x45\xbc\xac\x12\x00\x2c\x94\xcd\xe1\x4d\x91\x3e\x2b\x6a\x9a\xb7\x87\xcd\x06\x0e\xdb\xf4\xc7\x41\x04\xc0\xd1\x92\x67\xe9\x54\x81\x7f\xa1\x42\x39\x57\x53\xd5\xf0\x82\xf1\x6a\xa5\xbc\x7f\x2f\xc9\x44\x8b\x4a\xb3\x7d\x43\x59\x11\x1e\x91\xd0\x69\x94\x1e\x39\x8a\xd4\x84\x8a\xd1\x48\xc5\xc0\xb6\x40\xcf\xaa\xa8\xe0\xdd\xf2\xb9\xf9\x84\xdf\xa5\xc3\xe1\xa3\x2a\x73\x37\x3e\x01\x58\x3e\x24\x93\x2a\x7b\xd2\x92\xbc\x97\x47\x44\xe3\x93\xc5\x7f\xd6\x40\x5c\x6a\xb6\x9c\xc7\x85\x30\xe8\x35\xd9\x8a\x6d\xe9\xae\xf5\x46\x5b\xeb\x7e\x75\xf8\x8b\x23\x83\xb6\x70\xa3\x9c\x02\x41\x8f\xee\x28\xd7\xce\xc5\x23\xb2\x3e\x4f\xeb\x72\xc1\xba\x53\xad\x4e\xd8\x7f\xe9\x09\x1d\x92\xe2\x92\xae\x87\xc9\xf2\x21\x99\x49\xa6\xf4\xf5\x6b\x47\x7b\x2e\xa6\x4d\x83\x35\x60\x1d\x43\x26\x9e\x45\x26\xb6\x4f\xa2\x4d\xf8\xc2\x9a\x65\xc0\xf8\xb2\x26\x8d\x11\xd4\xc0\xa1\x2b\xfa\x8e\xd4\x04\xd8\x45\xd1\x45\x7b\xff\xea\x76\xc9\x72\x86\xa2\x2e\x1d\xa3\x63\x69\x19\x8b\x39\x76\xc3\x97\x77\xee\xcd\x51\x68\xdb\xc6\x73\xd5\x02\x06\x11\xe9\xd7\x3f\x9d\xc8\x96\xd4\x68\x48\x23\x63\x36\xa9\x6e\x55\xbf\xe6\xd6\x9f\x67\x50\xaa\xe6\xf3\x2d\x5a\x4d\xde\x6a\x1b\xdf\x1a\xb6\x50\xa7\x0f\x8a\xdc\x8e\x6b\xca\xfb\x87\xed\xb0\x2c\x3a\xf5\x57\x0d\x99\x39\x63\x87\x1b\xc9\x27\x00\xd3\xe6\x0e\xc3\x1b\x33\x77\x90\x62\x80\xd1\x7d\x19\x0c\xa5\xf8\x0e\x04\xf0\xac\x88\x65\x90\x7c\x52\x4b\x00\x74\xe6\x1e\xd8\x55\x9d\x2e\xf9\xe1\x59\xcb\xcb\x3e\x9c\x50\xc7\x3a\x46\x0a\xbb\xfb\x73\x33\x3d\x2b\x4b\x7f\x9c\xa6\x9a\x06\x63\x77\x6d\x26\x54\x46\x7a\x0e\xa4\xa3\xff\x21\x24\x1d\x7a\x02\x0c\x0c\x6a\x5b\xa8\xfc\x5f\xff\x58\x62\xbb\xe5\x03\xc7\x10\xc4\x3f\x01\x00\x00\xff\xff\x13\x04\xa6\x28\xe0\x07\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 2016, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_divide_interaction_read_stateDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xcc\x2b\x49\x2d\x4a\x4c\x2e\xc9\xcc\xcf\x2b\xe6\x52\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xce\xcf\x2d\xc8\x49\x2d\x49\x4d\xb1\xe6\xe2\x22\x52\x4b\x71\x62\x59\x6a\x4a\x7c\x5a\x7e\x51\x7c\x4e\x62\x49\x6a\x91\x35\x20\x00\x00\xff\xff\x35\x90\x51\xe8\x6a\x00\x00\x00")

func _000002_divide_interaction_read_stateDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_divide_interaction_read_stateDownSql,
		"000002_divide_interaction_read_state.down.sql",
	)
}

func _000002_divide_interaction_read_stateDownSql() (*asset, error) {
	bytes, err := _000002_divide_interaction_read_stateDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_divide_interaction_read_state.down.sql", size: 106, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_divide_interaction_read_stateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x41\x0e\xc2\x20\x10\x05\xd0\x3d\xa7\xf8\xf7\x70\x35\x95\xe9\xea\x0b\x89\xc2\xba\x21\xed\x98\x34\xa9\xc5\x00\xf1\xfc\x1e\x41\x2f\xf0\x84\x49\xef\x48\x32\x51\xb1\x9f\xc3\x5a\x59\xc7\x5e\xcf\xee\x00\xf1\x1e\xd7\xc8\x7c\x0b\x58\xeb\xeb\x7d\xd8\xb0\x0d\x53\x8c\x54\x09\x08\x31\x21\x64\x12\x5e\x67\xc9\x4c\x98\x85\x0f\xbd\x38\xf7\x1f\xd8\xcb\xc7\xb6\xe5\x59\xdb\x72\x94\x61\xed\x17\xfb\x0d\x00\x00\xff\xff\x71\xbc\xc4\x8e\xa6\x00\x00\x00")

func _000002_divide_interaction_read_stateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_divide_interaction_read_stateUpSql,
		"000002_divide_interaction_read_state.up.sql",
	)
}

func _000002_divide_interaction_read_stateUpSql() (*asset, error) {
	bytes, err := _000002_divide_interaction_read_stateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_divide_interaction_read_state.up.sql", size: 166, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_rename_prefset_to_engineDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000003_rename_prefset_to_engineDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_rename_prefset_to_engineDownSql,
		"000003_rename_prefSet_to_engine.down.sql",
	)
}

func _000003_rename_prefset_to_engineDownSql() (*asset, error) {
	bytes, err := _000003_rename_prefset_to_engineDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_rename_prefSet_to_engine.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1598224843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_rename_prefset_to_engineUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4a\xc4\x30\x14\x45\xf7\xf9\x8a\xbb\x6c\x65\xfe\x60\x56\x9d\xfa\x2a\xc1\x4e\x3a\x26\x29\x38\xab\x12\x26\x4f\x27\x8b\x66\x86\x24\x2a\xf8\xf5\x42\x3b\xba\x10\x04\x97\x8f\x73\x78\x5c\x4e\xab\xa9\xb1\x04\xdb\xec\x7a\x82\xec\xa0\x06\x0b\x7a\x96\xc6\x1a\x70\x7c\x0d\x91\xb3\x00\x2a\x04\x8f\x9d\x7c\x30\xa4\x65\xd3\xe3\xa0\xe5\xbe\xd1\x47\x3c\xd2\x71\x23\x00\xe0\x2d\x73\x9a\x82\x47\x88\x65\x79\xa0\xc6\xbe\x87\xa6\x8e\x34\xa9\x96\xcc\xc2\x73\x15\x7c\xbd\xea\xd1\xcd\x8c\x77\x97\x4e\x67\x97\x7e\xfc\x15\xe5\x4b\x2a\x7f\xa1\xe2\x52\x99\xbc\x2b\x8c\x12\x66\xce\xc5\xcd\x57\x7c\x84\x72\x5e\x4e\x7c\x5e\x22\xaf\x22\x47\xff\x1f\x6d\x54\xf2\x69\x24\x54\xb7\xf1\x9b\x65\x56\x2d\x80\x7a\x2b\x84\x54\x86\xb4\x85\x54\x76\xf8\xee\x00\x43\x3d\xb5\x16\x77\xe8\xf4\xb0\xc7\x35\xf1\x0b\x27\x8e\x27\x9e\x32\x97\xbc\x15\xe2\x5e\x0f\x87\x5b\xc8\xdf\xf0\x2b\x00\x00\xff\xff\xf7\x36\x9c\x34\x66\x01\x00\x00")

func _000003_rename_prefset_to_engineUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_rename_prefset_to_engineUpSql,
		"000003_rename_prefSet_to_engine.up.sql",
	)
}

func _000003_rename_prefset_to_engineUpSql() (*asset, error) {
	bytes, err := _000003_rename_prefset_to_engineUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_rename_prefSet_to_engine.up.sql", size: 358, mode: os.FileMode(420), modTime: time.Unix(1598224843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xd9\x6e\x1b\xc9\x15\x7d\x66\x7f\x45\x0d\x81\x31\xc8\x40\x21\x7b\x5f\x08\x08\x08\xc6\x76\x00\x3f\xc4\x03\xc4\x9e\xa7\x54\x40\x54\xd7\x42\x37\x22\xb2\xe9\xee\xa6\x5d\xb2\xa1\x7f\x0f\x4e\xdd\xa2\x44\x59\x0b\x69\x59\x13\xc7\x80\xac\x5e\xaa\xee\x7e\xce\xbd\xd5\x9a\xcf\xd9\xcb\x56\x69\xb6\xd2\x1b\xdd\x89\x41\x2b\x66\xda\x8e\x6d\x85\xfc\x8f\x58\x69\xb6\x6e\x56\x9d\x18\x9a\x76\xd3\xb3\xfa\x92\xad\xda\xbf\xd6\xcd\x46\x89\x41\xb0\x57\xbf\xb3\xb7\xbf\xbf\x67\xaf\x5f\xbd\x79\x3f\x63\x93\xbf\x5d\xef\x9e\x06\xf3\x39\xeb\xdb\x5d\x27\x75\xbf\xc0\x35\x56\xd7\xa2\xd7\xf3\x1b\x51\xf3\x10\xff\xa2\x65\xb3\x69\x86\x65\x2f\x3f\xe8\xb5\x98\xa9\xf6\xf3\x66\xd6\x7f\xbc\xf8\x8e\x2d\xbb\xed\xd1\x0d\xf1\x52\x35\x9f\x1a\xa5\x97\xcd\x66\xd0\x9d\x90\x78\xb5\xec\xb4\x50\xcb\x7e\x10\x83\x3e\x4d\xeb\x31\x21\x27\xd8\x91\x2c\x3b\xbd\x11\x6b\xbd\xdc\x76\xda\xbc\xd3\xc3\x72\x68\x97\x7a\xb3\x6a\x36\x27\x9a\xf0\xc8\xfe\xc7\xb5\xfb\x74\xcd\x56\x6d\x70\x37\xa5\x41\xd0\xac\xb7\x6d\x37\xb0\x49\x30\x1a\xd7\x97\x83\xee\xc7\xc1\x68\x2c\xdb\xf5\xb6\xd3\x7d\x3f\x5f\x7d\x69\xb6\x78\x60\xd6\x03\x7e\x35\x2d\xfd\x3f\x6f\xda\xdd\xd0\x5c\xe0\xa6\x75\x1b\xb6\x62\xf8\x30\x37\xcd\x85\xc6\x05\x1e\xf4\x43\xd7\x6c\x56\xee\xdd\xd0\xac\xf5\x38\x98\x06\x81\xd9\x6d\x24\xf3\xd6\xfc\x53\x0b\x35\x71\x55\xf4\xaf\x7f\x43\xed\x19\x83\x6f\x8c\xb6\x4d\xd9\x64\xff\x54\x77\x5d\xdb\x4d\xd9\xd7\x60\xb4\xfa\xe2\xee\xd8\xe2\x9c\xc1\xaa\xd9\x5b\xfd\x19\x42\x74\x37\x71\x66\xe3\xfe\xb7\x9d\x31\xba\x73\x62\xa7\xd3\x60\xd4\x18\xb7\xe1\x97\x73\xb6\x69\x2e\x20\x62\xd4\xe9\x61\xd7\x6d\x70\x7b\xc6\xcc\x7a\x98\xbd\x86\x74\x33\x19\x43\x10\xfb\xf5\xe3\x82\xfd\xfa\x69\x4c\x96\x38\x5d\xd3\x60\x74\x15\x04\xa3\x4f\xa2\x63\xf5\xce\x30\xd2\x43\x4a\x82\xd1\x92\xcc\x39\x67\x4d\x3b\x7b\xd9\x6e\x2f\x27\x2f\xea\x9d\x39\x63\xab\x2f\xd3\x60\x24\x2f\x5e\xef\x2d\x9d\xbd\xbc\x68\x7b\x3d\x99\x06\xcf\x65\x0f\xc4\x90\xfc\x07\x04\xe9\xae\x23\xbb\xfd\xc3\x7a\x67\x66\xbf\xc1\xf4\xc9\xf4\x0c\x2b\x82\xab\x20\x18\x2e\xb7\x9a\x89\xbe\xd7\x03\x42\xbe\x93\x03\xa4\x38\xff\x7c\x3e\x82\x51\xb3\x31\x2d\x63\x6d\x3f\xfb\x7b\x73\xa1\xdf\x6c\x4c\x7b\xbd\xcf\xa7\x70\xff\xfc\x40\x82\xcb\x21\x63\x3e\x8d\xc1\xa8\x6f\xbe\xb8\xfb\x66\x33\xe4\x69\x30\x5a\x83\x64\xd8\xb5\xd0\x7f\xb4\x4a\xbb\x87\xef\x9b\xb5\x66\x28\x93\x19\xae\xa0\x67\x3e\x67\x6f\x21\xcb\xbb\x80\xca\x72\x61\xa0\x1a\x9a\x98\xe6\x5b\x23\xa6\x6e\xfd\x64\xea\x55\xc3\x98\xeb\xbd\x33\xb7\x93\xa4\xbe\x83\x45\x87\x52\x61\xe2\x23\x52\xb1\x7e\x32\x25\x07\x6e\x0b\x75\x1b\x49\x28\x1c\xb9\x25\x14\x8e\x3e\x22\x14\xeb\x27\xd3\xc3\x30\xdc\x16\xed\xb6\x3f\x2c\xba\x31\x97\x2e\x5a\x8f\x6b\x40\x28\x27\xd3\x9b\xb0\xde\x51\x71\x10\xeb\x37\xfd\xab\xa6\xbb\xa5\xe6\xf3\x07\x3d\x7c\xd0\x1d\x13\x4c\x35\x9d\x96\x43\xdb\x5d\x3e\xa2\xce\xed\x9f\x4c\x59\xdd\xb6\x17\x77\x5d\x79\xd1\xf6\x33\xf8\x01\x1d\xbf\x9c\xb3\x70\x9f\x8a\xcb\xfe\x96\xca\xa6\x67\xfd\x65\x7f\x2c\x76\xef\x2e\x7b\xca\x87\xee\x8c\x90\xfa\xeb\xd5\x81\x3e\x5f\xdc\xc0\xeb\x72\x79\xb7\x5b\xbc\x6a\x3f\x6f\xde\x7d\xbc\x60\xe7\xbe\xc6\x27\x63\x6e\x23\xc3\x6d\x59\x73\x1b\x96\xdc\x86\xe1\xfd\x3f\xc6\x70\xab\x62\x6e\x55\xc6\x6d\x96\x71\x6b\x42\x6e\x65\xcd\x6d\x56\x70\x1b\x97\xdc\xa6\x82\xdb\x54\x71\x1b\x4b\x6e\xa5\xe6\x56\x1a\x6e\xb3\x84\xde\xc9\x8a\xd6\xa5\x25\xb7\xb1\xe2\x36\xad\xe9\x77\x16\xd3\xb3\xfd\xfb\xfd\x5a\x59\x92\x9c\x30\xe7\x36\x4c\x6f\xdb\x80\x1f\x19\x71\x9b\xe4\xdc\x46\x05\xb7\x32\xe6\x36\x92\x87\xb6\x8e\xf7\x2c\xfb\xb0\xf7\x9e\x09\xee\x63\xd8\x3d\x5f\x1c\x30\x74\x30\x1a\x3d\x12\xc9\xb3\x60\x34\x1a\x3f\xd2\xc8\xc7\x67\xc1\x68\x8a\x8c\x1c\xb1\x09\xe6\xfc\xc5\xb1\xd1\xa1\x39\x8e\x8e\xae\x39\xff\xa8\x47\xc7\xf8\xf5\x9a\x16\x1d\xb1\x2d\xce\xbf\x2d\xad\xaf\x60\x89\x05\x7b\xdc\x1f\x47\x17\x0b\x16\x97\x67\xae\x4e\x17\x87\x18\x9e\xa4\x71\x38\x75\xcf\x81\xac\x05\x21\xef\x8f\x4d\x63\x27\x51\x56\x15\x65\x98\x26\x69\x75\xc6\xc2\xe9\x55\x30\x12\xd0\xff\xc2\x79\xfc\xd5\xb9\xb9\x60\xde\x5b\x18\xb7\x70\xff\x5f\x5d\x27\x44\x9c\x1d\xab\xec\x3f\xb6\x4f\xad\xeb\x3a\xa5\x9a\x46\xcd\x96\x9a\xdb\xaa\xe6\x36\x91\xdc\x46\x21\xb7\x89\xe1\xb6\x30\x74\x2f\x33\xaa\xb5\x08\x75\x5d\x71\x9b\x63\x6f\xc8\xad\x28\xb8\xd5\x78\x2f\xb8\x35\xd0\x57\x71\x9b\x64\x84\x87\xac\xe6\xb6\xf2\x75\xae\x14\xb7\x55\xc2\xad\xce\xb8\xad\x33\x6e\xe3\x82\xdb\xb2\x22\xdd\x49\xc8\x6d\x5e\x92\x1e\xc8\x02\x9e\x0a\xc5\xad\x11\x24\xb7\x4c\xc9\x1e\x55\x72\x1b\x09\xc2\x48\xa4\xb9\x2d\x70\x9d\x72\x6b\x12\x6e\xa3\x9a\x5b\x55\x71\x5b\x1b\xb2\x3b\x49\xc8\x47\xc8\xcc\x33\x6e\xf3\x98\xdb\x5a\x11\x6e\x60\x77\xe6\xd7\xe5\x9a\x70\x26\x52\x8a\x01\xde\x19\xc5\x6d\x0d\xfc\x15\xdc\x9a\x88\x64\xc1\x7e\xad\xb8\x2d\x0a\x6e\xb3\x90\xdb\x02\x38\x4e\xb9\xad\x8c\xc7\x7d\x48\xb6\x15\xe0\x03\xe9\x39\xc3\x90\x8f\x78\x9f\x29\x8a\x99\xf6\x7b\xab\x9c\xdb\x42\xfb\xe7\xc0\xbf\x21\x5e\x49\x11\x1f\xc9\xad\x40\xac\x63\xf2\x01\xfb\x2b\xd8\x07\x1b\x22\x8a\x6d\x05\xbb\x34\xb7\x71\xcd\x6d\x2e\xb8\xad\x04\xb7\x35\x62\x5a\xd0\x3a\xc7\x1f\x9a\x5b\x55\x73\x6b\xb0\x17\x1c\x14\x91\xaf\xb0\x55\x45\x94\x1b\xe8\xd6\xc8\x43\xca\x6d\x19\x51\xbe\x05\x74\xc4\xdc\x26\x9e\x9b\xc0\x65\xca\xf3\x5e\x19\x53\x4c\xa0\x53\x78\x5b\xb1\x07\xf6\x83\xbf\xd2\x94\xea\x0e\x39\xac\x13\xca\x63\x9a\x70\x9b\x55\xdc\x46\x11\xe5\x0d\xb6\x2b\xe4\xbc\x22\xbf\xf0\x0c\xba\x4a\xc1\xad\x4a\x29\xdf\xee\x3a\xf2\x1c\x99\x91\xcd\xc8\x49\x1a\x52\x9e\x04\xf4\x97\x14\x4f\xe4\xc6\x20\xbf\x15\xb7\xa6\xa2\xfd\x88\x3d\xec\x93\x09\xc5\x4c\xa0\x6e\x91\x9f\x84\xdb\xa4\xa0\xd8\x85\x11\xb7\x59\xe9\xe3\x98\x52\x7d\xba\x35\x35\xf1\x3d\xe2\x03\xff\x2a\xc4\xae\x20\xdf\x74\x42\xeb\x60\x13\xfc\x56\xde\xa6\x4c\x52\x4c\x60\x63\x25\x29\xde\xa5\xaf\x6d\x5d\x12\x26\x94\xf7\x31\x57\x14\x73\xa1\xb9\x35\xc0\x4a\x4e\x58\xd1\x35\xd5\x44\x81\x58\x97\x14\xc7\x38\xe1\xb6\x4c\x48\x6e\x11\x92\x1f\x90\x1f\xc6\x94\xcf\x12\x35\xa5\xa9\x7f\xa8\xc2\xf7\x9f\x8c\xf6\xd5\x31\xf9\x96\x1a\x2f\x3b\xa6\xfe\x51\x0b\xca\xa9\x40\x6e\x34\xe1\x0a\xbe\xc0\x26\xe0\x37\x52\xe4\xbb\xf6\x31\x80\x9d\xae\xae\x2a\x8a\x73\x8c\xda\x41\xae\xe1\x43\x4e\xf5\x05\x3f\xf2\x9a\xe2\xe4\xb0\xa1\xe9\x1d\x6a\x15\xf6\xc3\xff\x3c\x24\xd9\xa8\x87\x18\x71\xd2\x54\xef\xb8\x76\xb9\x45\xce\x62\xda\x03\xff\xd1\xdf\x50\xd7\xb9\xcf\x3f\x9e\xc1\x27\xac\x2f\x15\xd5\x93\xf2\xf5\x8c\x9a\x05\x16\xc0\x19\xe0\x31\x3c\x47\xad\xc3\x37\xe8\x70\xb5\x94\x91\x6d\xc0\xa6\x46\x9e\x73\xf2\x09\x71\x29\x73\xd2\x0d\xbb\x61\x23\xe2\x9c\x27\x54\xa3\x51\x45\xb9\x40\x8d\xba\x3d\x09\xd5\x04\xb8\x00\xb1\x07\xde\xb2\x88\x38\x0c\x78\x93\x39\xd5\x19\x30\x83\x3c\x01\x8b\xb0\x15\xf1\x45\x8e\xc0\x3b\x95\x22\x1e\x03\x0f\xc0\x56\xec\x75\x33\x82\xd7\x8b\x1e\x2f\x2a\xe2\x27\x70\x24\x78\x4d\xe7\x54\x6f\xe0\x9c\xdc\xf3\x10\x70\x80\xe7\xe0\x40\x37\x57\xf8\x59\x44\x69\xaa\x47\xc7\x8b\x86\xb8\x09\x31\xce\x3c\x67\x87\xc6\x63\x4c\x52\xbc\x90\xbb\x3d\x87\x23\xd7\xe0\xba\xda\x73\x4f\x22\x28\xbf\xe0\x82\x50\x51\xee\x11\x0b\xd8\x89\xb5\xd0\x81\x38\x82\xd3\xc1\x57\x2a\x21\x9b\xc0\x3f\xd2\x73\x33\x38\x14\xf1\xaa\x42\xe2\xe2\xd2\x73\x10\xf8\x01\xf1\x0d\x25\xe1\x15\x39\x0e\x3d\x27\x83\x6f\xc0\x83\x65\x49\x35\x80\xbd\x85\xf4\xb3\x53\x4d\xba\x8a\x94\x74\x45\xbe\x8e\x11\x2b\xc4\x16\x79\x04\x17\x00\xfb\xe0\x1e\xcc\x6b\xf8\x01\x1e\x80\x1f\xc4\x01\x18\x85\x6f\xc0\x5f\x88\xf8\xd4\xe4\xbf\xe3\x08\xfc\x28\xaa\x29\xe8\x02\x3e\xb0\x0f\x35\x8d\x9a\x44\x4e\x73\xef\x13\xf0\x8c\x9a\x04\x87\x42\x16\xfa\x12\x7c\x40\x4f\x41\x1d\xa1\xde\x80\x19\x70\x0c\x6a\xcb\xbd\x8f\xc9\xe7\xd0\xf3\x06\xf0\x0f\x3e\x33\x92\x7a\x13\xf6\x80\x9b\x5c\xdf\xaa\xa9\x6f\x86\x09\xd9\x8c\x5e\x88\xbe\x87\x3a\x02\x87\x7d\x3b\x23\xa2\x47\xbb\x9e\x96\x13\x2f\x80\x23\xc3\xe2\x94\x19\xd1\xcd\x11\xcf\x32\x21\x3a\x49\x0f\xcd\x87\xf4\xbd\xe2\xe8\x74\xe8\x64\x3c\x71\x36\x3c\xf4\xe4\x4f\x9c\x0c\xf7\x9e\xec\xe7\xc2\x30\xca\x7f\xfa\x64\x78\xe4\x5b\xd5\x8f\x9c\x82\xc0\x94\x60\x7b\x74\x89\x22\x22\x36\x00\x1a\xb1\x0f\xf7\x40\x23\x3a\x04\xae\xdd\x54\x09\x16\x97\x1e\x45\x95\x3f\x01\x09\x9a\x90\x80\x50\x77\xe2\x91\xd4\xd1\xb1\x06\x48\x86\x3c\x37\x61\x85\xa4\x07\xf2\xc0\x56\xfb\x67\x06\x6c\x57\xf8\x77\x99\x67\xa6\xc4\x4f\x0a\xfe\xf4\x15\x7b\x76\xbd\xd6\x59\x11\x2b\xd6\x11\xe9\x40\x67\x8b\xe3\x1b\x26\x81\xbd\x40\x1a\x98\x02\x68\x74\x13\xa8\x24\x36\x75\x53\x5a\x44\xf7\xe8\x96\x58\x97\xfa\x75\x6e\x0a\x43\x07\x0b\xef\xa2\x30\xf1\x8c\x85\xbd\x98\x00\xb0\xfe\xc1\x93\xda\x69\x39\x7b\x2a\x32\x4f\x93\x7e\x83\xd6\x53\x3f\x99\xde\x87\xe0\xd3\x74\x9d\x8e\xea\xef\x8a\xcc\xb3\x22\xfd\xf4\x28\x78\xf4\x47\xe1\xff\x3d\xf8\x9f\x7e\x50\x2c\x25\x41\xd5\x1d\x22\x34\x0d\x67\x28\x7b\x34\xa3\x30\xa3\x81\x1e\x0d\x13\xc3\x05\x9a\x38\x20\x0a\xb8\x3a\x18\x64\x34\xfc\x60\xe8\x0a\x6b\x3a\x14\x61\x3f\x06\x51\x34\x46\x0c\x1b\x15\x86\xe4\x94\x86\x1e\x0c\xb0\x4e\x6f\x44\x0d\x11\xcd\x1d\x7a\xf7\x87\x24\x0c\xf8\x80\xa0\x36\x04\xfb\x24\x26\x98\x01\xde\x18\x8e\x30\x74\x00\xba\xae\xf1\x63\x50\xf2\xb4\x80\x61\x6d\x2f\xd7\x0d\x0c\x05\xd1\x04\xa0\x0d\xbb\xd0\x70\xf5\x7e\x10\x57\x34\x50\x60\x08\x72\x34\x97\x50\x0c\x32\x4f\x7f\x88\x57\x12\x91\xfd\x79\x4a\x87\x35\xe8\xc9\xfd\xa0\x0c\x8a\x83\x4f\x38\x04\x80\xbe\x70\xf8\x4c\x7c\x5c\x10\x73\xc8\x76\x43\x49\x41\x83\x19\x1a\x3c\xec\x55\x7e\x50\xc7\xc1\x28\xf7\xb1\xc1\xa1\xd5\x1d\xae\xd5\x5d\x9a\x01\x75\xe1\x90\x82\x81\xa0\xf4\x43\xf7\x53\x69\xe6\x87\xda\xff\x29\xb2\x4f\xa7\x98\x87\x47\x84\x53\xf4\x3c\x1b\xbd\xfc\x69\x63\xc4\xa9\xfe\xef\xa9\x25\xff\xf9\xd4\x72\xeb\x0f\x50\xfd\xe1\x1f\xa0\x7e\x64\xa4\xb8\x6f\x80\x7d\x68\xfd\xbd\x35\x7d\xd4\xac\xa7\x16\xf4\x51\xc1\x37\xd5\x7c\xc2\xdf\xf6\xee\x2b\xe5\xa3\x1a\x4e\xaf\xe3\x53\xa3\xf0\xac\x45\x7c\x92\xdb\xbe\x82\xc3\xef\xad\xdf\x32\x8e\xd3\x32\x4d\xfe\x17\xf5\xfb\x63\x5d\x11\x43\x9e\x8c\x68\x68\x74\xc7\x32\x74\xc5\x94\x3e\x37\x80\xed\x8d\xff\xec\x83\x63\x5c\xee\x3f\x47\x1a\x4d\x9f\x43\xb2\x9c\x8e\xab\x46\xd0\xa7\x27\x27\x47\xd3\xb1\x14\x47\xca\xb8\xa2\xae\x21\x6a\xea\x30\xb1\xff\x4c\xe2\x3e\x9f\x42\x5e\x4e\x9f\x2e\x70\xb4\xc4\x7e\xd7\x79\x33\xff\xf9\xae\xa6\x0e\xeb\x3a\x74\x4a\x9f\x2c\x4a\x43\xc7\xdb\xa2\xa4\x4f\x56\xd0\x25\xea\xff\x06\x00\x00\xff\xff\xf1\x90\x8c\xde\x00\x20\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1598226238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql":                   _000001_init_schemaDownSql,
	"000001_init_schema.up.sql":                     _000001_init_schemaUpSql,
	"000002_divide_interaction_read_state.down.sql": _000002_divide_interaction_read_stateDownSql,
	"000002_divide_interaction_read_state.up.sql":   _000002_divide_interaction_read_stateUpSql,
	"000003_rename_prefSet_to_engine.down.sql":      _000003_rename_prefset_to_engineDownSql,
	"000003_rename_prefSet_to_engine.up.sql":        _000003_rename_prefset_to_engineUpSql,
	"bindata.go":                                    bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql":                   &bintree{_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql":                     &bintree{_000001_init_schemaUpSql, map[string]*bintree{}},
	"000002_divide_interaction_read_state.down.sql": &bintree{_000002_divide_interaction_read_stateDownSql, map[string]*bintree{}},
	"000002_divide_interaction_read_state.up.sql":   &bintree{_000002_divide_interaction_read_stateUpSql, map[string]*bintree{}},
	"000003_rename_prefSet_to_engine.down.sql":      &bintree{_000003_rename_prefset_to_engineDownSql, map[string]*bintree{}},
	"000003_rename_prefSet_to_engine.up.sql":        &bintree{_000003_rename_prefset_to_engineUpSql, map[string]*bintree{}},
	"bindata.go":                                    &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
