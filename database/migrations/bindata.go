// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// database/migrations/000001_init_schema.down.sql
// database/migrations/000001_init_schema.up.sql
// database/migrations/000002_divide_interaction_read_state.down.sql
// database/migrations/000002_divide_interaction_read_state.up.sql
// database/migrations/000003_rename_prefSet_to_engine.down.sql
// database/migrations/000003_rename_prefSet_to_engine.up.sql
// database/migrations/bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xf0\xcb\x57\x28\x4a\x4d\x2c\xce\xcf\x53\x28\xc9\x57\x48\x2d\x4b\x2d\x52\x48\xc9\x57\x28\xc9\xc8\x2c\x06\x04\x00\x00\xff\xff\xc1\x36\x17\xc2\x1c\x00\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcf\x8e\x9b\x3c\x10\x3f\x7f\x3c\xc5\x1c\x13\x29\x6f\xb0\xa7\xec\xca\xfb\x09\x35\x4d\x5b\x92\x48\xdd\x93\xe5\xb5\x27\x89\x55\x30\x68\x3c\xec\x4a\x7d\xfa\xca\x84\x10\xd8\x1a\xc8\x1e\x7a\xc4\xf3\x1b\xd9\xbf\x3f\x33\x00\x3c\x65\x62\xbd\x17\xb0\x5f\x3f\x6e\x04\xa4\xcf\xb0\xfd\xb6\x07\xf1\x33\xdd\xed\x77\x50\x7b\x24\x9f\x2c\xc0\x1a\x78\x4c\xff\xdf\x89\x2c\x5d\x6f\xe0\x7b\x96\x7e\x5d\x67\x2f\xf0\x45\xbc\xac\x12\x00\x2c\x94\xcd\xe1\x4d\x91\x3e\x2b\x6a\x9a\xb7\x87\xcd\x06\x0e\xdb\xf4\xc7\x41\x04\xc0\xd1\x92\x67\xe9\x54\x81\x7f\xa1\x42\x39\x57\x53\xd5\xf0\x82\xf1\x6a\xa5\xbc\x7f\x2f\xc9\x44\x8b\x4a\xb3\x7d\x43\x59\x11\x1e\x91\xd0\x69\x94\x1e\x39\x8a\xd4\x84\x8a\xd1\x48\xc5\xc0\xb6\x40\xcf\xaa\xa8\xe0\xdd\xf2\xb9\xf9\x84\xdf\xa5\xc3\xe1\xa3\x2a\x73\x37\x3e\x01\x58\x3e\x24\x93\x2a\x7b\xd2\x92\xbc\x97\x47\x44\xe3\x93\xc5\x7f\xd6\x40\x5c\x6a\xb6\x9c\xc7\x85\x30\xe8\x35\xd9\x8a\x6d\xe9\xae\xf5\x46\x5b\xeb\x7e\x75\xf8\x8b\x23\x83\xb6\x70\xa3\x9c\x02\x41\x8f\xee\x28\xd7\xce\xc5\x23\xb2\x3e\x4f\xeb\x72\xc1\xba\x53\xad\x4e\xd8\x7f\xe9\x09\x1d\x92\xe2\x92\xae\x87\xc9\xf2\x21\x99\x49\xa6\xf4\xf5\x6b\x47\x7b\x2e\xa6\x4d\x83\x35\x60\x1d\x43\x26\x9e\x45\x26\xb6\x4f\xa2\x4d\xf8\xc2\x9a\x65\xc0\xf8\xb2\x26\x8d\x11\xd4\xc0\xa1\x2b\xfa\x8e\xd4\x04\xd8\x45\xd1\x45\x7b\xff\xea\x76\xc9\x72\x86\xa2\x2e\x1d\xa3\x63\x69\x19\x8b\x39\x76\xc3\x97\x77\xee\xcd\x51\x68\xdb\xc6\x73\xd5\x02\x06\x11\xe9\xd7\x3f\x9d\xc8\x96\xd4\x68\x48\x23\x63\x36\xa9\x6e\x55\xbf\xe6\xd6\x9f\x67\x50\xaa\xe6\xf3\x2d\x5a\x4d\xde\x6a\x1b\xdf\x1a\xb6\x50\xa7\x0f\x8a\xdc\x8e\x6b\xca\xfb\x87\xed\xb0\x2c\x3a\xf5\x57\x0d\x99\x39\x63\x87\x1b\xc9\x27\x00\xd3\xe6\x0e\xc3\x1b\x33\x77\x90\x62\x80\xd1\x7d\x19\x0c\xa5\xf8\x0e\x04\xf0\xac\x88\x65\x90\x7c\x52\x4b\x00\x74\xe6\x1e\xd8\x55\x9d\x2e\xf9\xe1\x59\xcb\xcb\x3e\x9c\x50\xc7\x3a\x46\x0a\xbb\xfb\x73\x33\x3d\x2b\x4b\x7f\x9c\xa6\x9a\x06\x63\x77\x6d\x26\x54\x46\x7a\x0e\xa4\xa3\xff\x21\x24\x1d\x7a\x02\x0c\x0c\x6a\x5b\xa8\xfc\x5f\xff\x58\x62\xbb\xe5\x03\xc7\x10\xc4\x3f\x01\x00\x00\xff\xff\x13\x04\xa6\x28\xe0\x07\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 2016, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_divide_interaction_read_stateDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xcc\x2b\x49\x2d\x4a\x4c\x2e\xc9\xcc\xcf\x2b\xe6\x52\x50\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xce\xcf\x2d\xc8\x49\x2d\x49\x4d\xb1\xe6\xe2\x22\x52\x4b\x71\x62\x59\x6a\x4a\x7c\x5a\x7e\x51\x7c\x4e\x62\x49\x6a\x91\x35\x20\x00\x00\xff\xff\x35\x90\x51\xe8\x6a\x00\x00\x00")

func _000002_divide_interaction_read_stateDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_divide_interaction_read_stateDownSql,
		"000002_divide_interaction_read_state.down.sql",
	)
}

func _000002_divide_interaction_read_stateDownSql() (*asset, error) {
	bytes, err := _000002_divide_interaction_read_stateDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_divide_interaction_read_state.down.sql", size: 106, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_divide_interaction_read_stateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x41\x0e\xc2\x20\x10\x05\xd0\x3d\xa7\xf8\xf7\x70\x35\x95\xe9\xea\x0b\x89\xc2\xba\x21\xed\x98\x34\xa9\xc5\x00\xf1\xfc\x1e\x41\x2f\xf0\x84\x49\xef\x48\x32\x51\xb1\x9f\xc3\x5a\x59\xc7\x5e\xcf\xee\x00\xf1\x1e\xd7\xc8\x7c\x0b\x58\xeb\xeb\x7d\xd8\xb0\x0d\x53\x8c\x54\x09\x08\x31\x21\x64\x12\x5e\x67\xc9\x4c\x98\x85\x0f\xbd\x38\xf7\x1f\xd8\xcb\xc7\xb6\xe5\x59\xdb\x72\x94\x61\xed\x17\xfb\x0d\x00\x00\xff\xff\x71\xbc\xc4\x8e\xa6\x00\x00\x00")

func _000002_divide_interaction_read_stateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_divide_interaction_read_stateUpSql,
		"000002_divide_interaction_read_state.up.sql",
	)
}

func _000002_divide_interaction_read_stateUpSql() (*asset, error) {
	bytes, err := _000002_divide_interaction_read_stateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_divide_interaction_read_state.up.sql", size: 166, mode: os.FileMode(420), modTime: time.Unix(1597804349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_rename_prefset_to_engineDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000003_rename_prefset_to_engineDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_rename_prefset_to_engineDownSql,
		"000003_rename_prefSet_to_engine.down.sql",
	)
}

func _000003_rename_prefset_to_engineDownSql() (*asset, error) {
	bytes, err := _000003_rename_prefset_to_engineDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_rename_prefSet_to_engine.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1598150594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_rename_prefset_to_engineUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4a\xc4\x30\x14\x45\xf7\xf9\x8a\xbb\x6c\x65\xfe\x60\x56\x9d\xfa\x2a\xc1\x4e\x3a\x26\x29\x38\xab\x12\x26\x4f\x27\x8b\x66\x86\x24\x2a\xf8\xf5\x42\x3b\xba\x10\x04\x97\x8f\x73\x78\x5c\x4e\xab\xa9\xb1\x04\xdb\xec\x7a\x82\xec\xa0\x06\x0b\x7a\x96\xc6\x1a\x70\x7c\x0d\x91\xb3\x00\x2a\x04\x8f\x9d\x7c\x30\xa4\x65\xd3\xe3\xa0\xe5\xbe\xd1\x47\x3c\xd2\x71\x23\x00\xe0\x2d\x73\x9a\x82\x47\x88\x65\x79\xa0\xc6\xbe\x87\xa6\x8e\x34\xa9\x96\xcc\xc2\x73\x15\x7c\xbd\xea\xd1\xcd\x8c\x77\x97\x4e\x67\x97\x7e\xfc\x15\xe5\x4b\x2a\x7f\xa1\xe2\x52\x99\xbc\x2b\x8c\x12\x66\xce\xc5\xcd\x57\x7c\x84\x72\x5e\x4e\x7c\x5e\x22\xaf\x22\x47\xff\x1f\x6d\x54\xf2\x69\x24\x54\xb7\xf1\x9b\x65\x56\x2d\x80\x7a\x2b\x84\x54\x86\xb4\x85\x54\x76\xf8\xee\x00\x43\x3d\xb5\x16\x77\xe8\xf4\xb0\xc7\x35\xf1\x0b\x27\x8e\x27\x9e\x32\x97\xbc\x15\xe2\x5e\x0f\x87\x5b\xc8\xdf\xf0\x2b\x00\x00\xff\xff\xf7\x36\x9c\x34\x66\x01\x00\x00")

func _000003_rename_prefset_to_engineUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_rename_prefset_to_engineUpSql,
		"000003_rename_prefSet_to_engine.up.sql",
	)
}

func _000003_rename_prefset_to_engineUpSql() (*asset, error) {
	bytes, err := _000003_rename_prefset_to_engineUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_rename_prefSet_to_engine.up.sql", size: 358, mode: os.FileMode(420), modTime: time.Unix(1598150976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x6f\xdb\x38\x16\x7e\xb6\x7e\x05\xc7\xc0\x14\xf6\x22\x6b\x53\x77\xc9\x40\x80\xc5\xb4\x5d\xa0\x0f\xdb\x01\xb6\x9d\xa7\xe5\xc2\xa0\x44\xd2\x15\x36\xb6\x5c\x49\x6e\x99\x16\xf9\xef\x8b\x8f\x87\x4e\x9c\xe6\x62\x37\xcd\x6c\xb7\x40\x1a\x5d\xc8\x73\xff\xbe\x73\xa8\xcc\xe7\xec\x65\xab\x34\x5b\xe9\x8d\xee\xe4\xa0\x15\x33\x6d\xc7\xb6\xb2\xfe\x8f\x5c\x69\xb6\x6e\x56\x9d\x1c\x9a\x76\xd3\xb3\xea\x92\xad\xda\xbf\x56\xcd\x46\xc9\x41\xb2\x57\xbf\xb3\xb7\xbf\xbf\x67\xaf\x5f\xbd\x79\x3f\x63\x93\xbf\x5d\xef\x9e\x06\xf3\x39\xeb\xdb\x5d\x57\xeb\x7e\x81\x6b\xac\xae\x64\xaf\xe7\x37\xa2\xe6\x1c\xff\xc2\x65\xb3\x69\x86\x65\x5f\x7f\xd0\x6b\x39\x53\xed\xe7\xcd\xac\xff\x78\xf1\x1d\x5b\x76\xdb\xa3\x1b\xa2\xa5\x6a\x3e\x35\x4a\x2f\x9b\xcd\xa0\x3b\x59\xe3\xd5\xb2\xd3\x52\x2d\xfb\x41\x0e\xfa\x34\xad\xc7\x84\x9c\x60\x47\xbc\xec\xf4\x46\xae\xf5\x72\xdb\x69\xf3\x4e\x0f\xcb\xa1\x5d\xea\xcd\xaa\xd9\x9c\x68\xc2\x23\xfb\x1f\xd7\xee\xd3\x35\x5b\xb5\xc1\xdd\x94\x06\x41\xb3\xde\xb6\xdd\xc0\x26\xc1\x68\x5c\x5d\x0e\xba\x1f\x07\xa3\x71\xdd\xae\xb7\x9d\xee\xfb\xf9\xea\x4b\xb3\xc5\x03\xb3\x1e\xf0\xab\x69\xe9\xff\x79\xd3\xee\x86\xe6\x02\x37\xad\xdb\xb0\x95\xc3\x87\xb9\x69\x2e\x34\x2e\xf0\xa0\x1f\xba\x66\xb3\x72\xef\x86\x66\xad\xc7\xc1\x34\x08\xcc\x6e\x53\x33\x6f\xcd\x3f\xb5\x54\x13\x57\x45\xff\xfa\x37\xd4\x9e\x31\xf8\xc6\x68\xdb\x94\x4d\xf6\x4f\x75\xd7\xb5\xdd\x94\x7d\x0d\x46\xab\x2f\xee\x8e\x2d\xce\x19\xac\x9a\xbd\xd5\x9f\x21\x44\x77\x13\x67\x36\xee\x7f\xdb\x19\xa3\x3b\x27\x76\x3a\x0d\x46\x8d\x71\x1b\x7e\x39\x67\x9b\xe6\x02\x22\x46\x9d\x1e\x76\xdd\x06\xb7\x67\xcc\xac\x87\xd9\x6b\x48\x37\x93\x31\x04\xb1\x5f\x3f\x2e\xd8\xaf\x9f\xc6\x64\x89\xd3\x35\x0d\x46\x57\x41\x30\xfa\x24\x3b\x56\xed\x0c\x23\x3d\xa4\x24\x18\x2d\xc9\x9c\x73\xd6\xb4\xb3\x97\xed\xf6\x72\xf2\xa2\xda\x99\x33\xb6\xfa\x32\x0d\x46\xf5\xc5\xeb\xbd\xa5\xb3\x97\x17\x6d\xaf\x27\xd3\xe0\xb9\xec\x81\x18\x92\xff\x80\x20\xdd\x75\x64\xb7\x7f\x58\xed\xcc\xec\x37\x98\x3e\x99\x9e\x61\x45\x70\x15\x04\xc3\xe5\x56\x33\xd9\xf7\x7a\x40\xc8\x77\xf5\x00\x29\xce\x3f\x9f\x8f\x60\xd4\x6c\x4c\xcb\x58\xdb\xcf\xfe\xde\x5c\xe8\x37\x1b\xd3\x5e\xef\xf3\x29\xdc\x3f\x3f\x90\xe0\x72\xc8\x98\x4f\x63\x30\xea\x9b\x2f\xee\xbe\xd9\x0c\x59\x12\x8c\xd6\x20\x19\x76\x2d\xf4\x1f\xad\xd2\xee\xe1\xfb\x66\xad\x19\xca\x64\x86\x2b\xe8\x99\xcf\xd9\x5b\xc8\xf2\x2e\xa0\xb2\x5c\x18\xa8\x86\x26\xa6\xf9\xd6\x88\xa9\x5b\x3f\x99\x7a\xd5\x30\xe6\x7a\xef\xcc\xed\x24\xa9\xef\x60\xd1\xa1\x54\x98\xf8\x88\x54\xac\x9f\x4c\xc9\x81\xdb\x42\xdd\x46\x12\x0a\x47\x6e\x09\x85\xa3\x8f\x08\xc5\xfa\xc9\xf4\x30\x0c\xb7\x45\xbb\xed\x0f\x8b\x6e\xcc\xa5\x8b\xd6\xe3\x1a\x10\xca\xc9\xf4\x26\xac\x77\x54\x1c\xc4\xfa\x4d\xff\xaa\xe9\x6e\xa9\xf9\xfc\x41\x0f\x1f\x74\xc7\x24\x53\x4d\xa7\xeb\xa1\xed\x2e\x1f\x51\xe7\xf6\x4f\xa6\xac\x6a\xdb\x8b\xbb\xae\xbc\x68\xfb\x19\xfc\x80\x8e\x5f\xce\x19\xdf\xa7\xe2\xb2\xbf\xa5\xb2\xe9\x59\x7f\xd9\x1f\x8b\xdd\xbb\xcb\x9e\xf2\xa1\x3b\x23\x6b\xfd\xf5\xea\x40\x9f\x2f\x6e\xe0\x75\xb9\xbc\xdb\x2d\x5e\xb5\x9f\x37\xef\x3e\x5e\xb0\x73\x5f\xe3\x93\xb1\xb0\xa1\x11\xb6\xa8\x84\xe5\x85\xb0\x9c\xdf\xff\x63\x8c\xb0\x2a\x12\x56\xa5\xc2\xa6\xa9\xb0\x86\x0b\x5b\x57\xc2\xa6\xb9\xb0\x51\x21\x6c\x22\x85\x4d\x94\xb0\x51\x2d\x6c\xad\x85\xad\x8d\xb0\x69\x4c\xef\xea\x92\xd6\x25\x85\xb0\x91\x12\x36\xa9\xe8\x77\x1a\xd1\xb3\xfd\xfb\xfd\xda\xba\x20\x39\x3c\x13\x96\x27\xb7\x6d\xc0\x4f\x1d\x0a\x1b\x67\xc2\x86\xb9\xb0\x75\x24\x6c\x58\x1f\xda\x3a\xde\xb3\xec\xc3\xde\x7b\x26\xb8\x8f\x61\xf7\x7c\x71\xc0\xd0\xc1\x68\xf4\x48\x24\xcf\x82\xd1\x68\xfc\x48\x23\x1f\x9f\x05\xa3\x29\x32\x72\xc4\x26\x98\xf3\x17\xc7\x46\x87\xe6\x38\x3a\xba\xe6\xfc\xa3\x1e\x1d\xe3\xd7\x6b\x5a\x74\xc4\xb6\x38\xff\xb6\xb4\xbe\x82\x25\x16\xec\x71\x7f\x1c\x5d\x2c\x58\x54\x9c\xb9\x3a\x5d\x1c\x62\x78\x92\x44\x7c\xea\x9e\x03\x59\x0b\x42\xde\x1f\x9b\xc6\x4e\xc2\xb4\xcc\x0b\x9e\xc4\x49\x79\xc6\xf8\xf4\x2a\x18\x49\xe8\x7f\xe1\x3c\xfe\xea\xdc\x5c\x30\xef\x2d\x8c\x5b\xb8\xff\xaf\xae\x13\x22\xcf\x8e\x55\xf6\x1f\xdb\xa7\xd6\x75\x95\x50\x4d\xa3\x66\x0b\x2d\x6c\x59\x09\x1b\xd7\xc2\x86\x5c\xd8\xd8\x08\x9b\x1b\xba\xaf\x53\xaa\xb5\x10\x75\x5d\x0a\x9b\x61\x2f\x17\x56\xe6\xc2\x6a\xbc\x97\xc2\x1a\xe8\x2b\x85\x8d\x53\xc2\x43\x5a\x09\x5b\xfa\x3a\x57\x4a\xd8\x32\x16\x56\xa7\xc2\x56\xa9\xb0\x51\x2e\x6c\x51\x92\xee\x98\x0b\x9b\x15\xa4\x07\xb2\x80\xa7\x5c\x09\x6b\x24\xc9\x2d\x12\xb2\x47\x15\xc2\x86\x92\x30\x12\x6a\x61\x73\x5c\x27\xc2\x9a\x58\xd8\xb0\x12\x56\x95\xc2\x56\x86\xec\x8e\x63\xf2\x11\x32\xb3\x54\xd8\x2c\x12\xb6\x52\x84\x1b\xd8\x9d\xfa\x75\x99\x26\x9c\xc9\x84\x62\x80\x77\x46\x09\x5b\x01\x7f\xb9\xb0\x26\x24\x59\xb0\x5f\x2b\x61\xf3\x5c\xd8\x94\x0b\x9b\x03\xc7\x89\xb0\xa5\xf1\xb8\xe7\x64\x5b\x0e\x3e\xa8\x3d\x67\x18\xf2\x11\xef\x53\x45\x31\xd3\x7e\x6f\x99\x09\x9b\x6b\xff\x1c\xf8\x37\xc4\x2b\x09\xe2\x53\x0b\x2b\x11\xeb\x88\x7c\xc0\xfe\x12\xf6\xc1\x86\x90\x62\x5b\xc2\x2e\x2d\x6c\x54\x09\x9b\x49\x61\x4b\x29\x6c\x85\x98\xe6\xb4\xce\xf1\x87\x16\x56\x55\xc2\x1a\xec\x05\x07\x85\xe4\x2b\x6c\x55\x21\xe5\x06\xba\x35\xf2\x90\x08\x5b\x84\x94\x6f\x09\x1d\x91\xb0\xb1\xe7\x26\x70\x99\xf2\xbc\x57\x44\x14\x13\xe8\x94\xde\x56\xec\x81\xfd\xe0\xaf\x24\xa1\xba\x43\x0e\xab\x98\xf2\x98\xc4\xc2\xa6\xa5\xb0\x61\x48\x79\x83\xed\x0a\x39\x2f\xc9\x2f\x3c\x83\xae\x42\x0a\xab\x12\xca\xb7\xbb\x0e\x3d\x47\xa6\x64\x33\x72\x92\x70\xca\x93\x84\xfe\x82\xe2\x89\xdc\x18\xe4\xb7\x14\xd6\x94\xb4\x1f\xb1\x87\x7d\x75\x4c\x31\x93\xa8\x5b\xe4\x27\x16\x36\xce\x29\x76\x3c\x14\x36\x2d\x7c\x1c\x13\xaa\x4f\xb7\xa6\x22\xbe\x47\x7c\xe0\x5f\x89\xd8\xe5\xe4\x9b\x8e\x69\x1d\x6c\x82\xdf\xca\xdb\x94\xd6\x14\x13\xd8\x58\xd6\x14\xef\xc2\xd7\xb6\x2e\x08\x13\xca\xfb\x98\x29\x8a\xb9\xd4\xc2\x1a\x60\x25\x23\xac\xe8\x8a\x6a\x22\x47\xac\x0b\x8a\x63\x14\x0b\x5b\xc4\x24\x37\xe7\xe4\x07\xe4\xf3\x88\xf2\x59\xa0\xa6\x34\xf5\x0f\x95\xfb\xfe\x93\xd2\xbe\x2a\x22\xdf\x12\xe3\x65\x47\xd4\x3f\x2a\x49\x39\x95\xc8\x8d\x26\x5c\xc1\x17\xd8\x04\xfc\x86\x8a\x7c\xd7\x3e\x06\xb0\xd3\xd5\x55\x49\x71\x8e\x50\x3b\xc8\x35\x7c\xc8\xa8\xbe\xe0\x47\x56\x51\x9c\x1c\x36\x34\xbd\x43\xad\xc2\x7e\xf8\x9f\x71\x92\x8d\x7a\x88\x10\x27\x4d\xf5\x8e\x6b\x97\x5b\xe4\x2c\xa2\x3d\xf0\x1f\xfd\x0d\x75\x9d\xf9\xfc\xe3\x19\x7c\xc2\xfa\x42\x51\x3d\x29\x5f\xcf\xa8\x59\x60\x01\x9c\x01\x1e\xc3\x73\xd4\x3a\x7c\x83\x0e\x57\x4b\x29\xd9\x06\x6c\x6a\xe4\x39\x23\x9f\x10\x97\x22\x23\xdd\xb0\x1b\x36\x22\xce\x59\x4c\x35\x1a\x96\x94\x0b\xd4\xa8\xdb\x13\x53\x4d\x80\x0b\x10\x7b\xe0\x2d\x0d\x89\xc3\x80\xb7\x3a\xa3\x3a\x03\x66\x90\x27\x60\x11\xb6\x22\xbe\xc8\x11\x78\xa7\x54\xc4\x63\xe0\x01\xd8\x8a\xbd\x6e\x46\xf0\x7a\xd1\xe3\x65\x49\xfc\x04\x8e\x04\xaf\xe9\x8c\xea\x0d\x9c\x93\x79\x1e\x02\x0e\xf0\x1c\x1c\xe8\xe6\x0a\x3f\x8b\x28\x4d\xf5\xe8\x78\xd1\x10\x37\x21\xc6\xa9\xe7\x6c\x6e\x3c\xc6\x6a\x8a\x17\x72\xb7\xe7\x70\xe4\x1a\x5c\x57\x79\xee\x89\x25\xe5\x17\x5c\xc0\x15\xe5\x1e\xb1\x80\x9d\x58\x0b\x1d\x88\x23\x38\x1d\x7c\xa5\x62\xb2\x09\xfc\x53\x7b\x6e\x06\x87\x22\x5e\x25\x27\x2e\x2e\x3c\x07\x81\x1f\x10\x5f\x5e\x13\x5e\x91\x63\xee\x39\x19\x7c\x03\x1e\x2c\x0a\xaa\x01\xec\xcd\x6b\x3f\x3b\x55\xa4\x2b\x4f\x48\x57\xe8\xeb\x18\xb1\x42\x6c\x91\x47\x70\x01\xb0\x0f\xee\xc1\xbc\x86\x1f\xe0\x01\xf8\x41\x1c\x80\x51\xf8\x06\xfc\x71\xc4\xa7\x22\xff\x1d\x47\xe0\x47\x51\x4d\x41\x17\xf0\x81\x7d\xa8\x69\xd4\x24\x72\x9a\x79\x9f\x80\x67\xd4\x24\x38\x14\xb2\xd0\x97\xe0\x03\x7a\x0a\xea\x08\xf5\x06\xcc\x80\x63\x50\x5b\xee\x7d\x44\x3e\x73\xcf\x1b\xc0\x3f\xf8\xcc\xd4\xd4\x9b\xb0\x07\xdc\xe4\xfa\x56\x45\x7d\x93\xc7\x64\x33\x7a\x21\xfa\x1e\xea\x08\x1c\xf6\xed\x8c\x88\x1e\xed\x7a\x5a\x46\xbc\x00\x8e\xe4\xf9\x29\x33\xa2\x9b\x23\x9e\x65\x42\x74\x92\x1e\x9a\x0f\xe9\x7b\xc5\xd1\xe9\xd0\xc9\x78\xe2\x6c\x78\xe8\xc9\x9f\x38\x19\xee\x3d\xd9\xcf\x85\x3c\xcc\x7e\xfa\x64\x78\xe4\x5b\xd5\x8f\x9c\x82\xc0\x94\x60\x7b\x74\x89\x3c\x24\x36\x00\x1a\xb1\x0f\xf7\x40\x23\x3a\x04\xae\xdd\x54\x09\x16\xaf\x3d\x8a\x4a\x7f\x02\x92\x34\x21\x01\xa1\xee\xc4\x53\x53\x47\xc7\x1a\x20\x19\xf2\xdc\x84\xc5\x49\x0f\xe4\x81\xad\xf6\xcf\x0c\xd8\x2e\xf7\xef\x52\xcf\x4c\xb1\x9f\x14\xfc\xe9\x2b\xf2\xec\x7a\xad\xb3\x24\x56\xac\x42\xd2\x81\xce\x16\x45\x37\x4c\x02\x7b\x81\x34\x30\x05\xd0\xe8\x26\xd0\x9a\xd8\xd4\x4d\x69\x21\xdd\xa3\x5b\x62\x5d\xe2\xd7\xb9\x29\x0c\x1d\x8c\xdf\x45\x61\xec\x19\x0b\x7b\x31\x01\x60\xfd\x83\x27\xb5\xd3\x72\xf6\x54\x64\x9e\x26\xfd\x06\xad\xa7\x7e\x32\xbd\x0f\xc1\xa7\xe9\x3a\x1d\xd5\xdf\x15\x99\x67\x45\xfa\xe9\x51\xf0\xe8\x0f\xf9\xff\x3d\xf8\x9f\x7e\x50\x2c\x6a\x82\xaa\x3b\x44\x68\x1a\xce\x50\xf6\x68\x46\x3c\xa5\x81\x1e\x0d\x13\xc3\x05\x9a\x38\x20\x0a\xb8\x3a\x18\xa4\x34\xfc\x60\xe8\xe2\x15\x1d\x8a\xb0\x1f\x83\x28\x1a\x23\x86\x8d\x12\x43\x72\x42\x43\x0f\x06\x58\xa7\x37\xa4\x86\x88\xe6\x0e\xbd\xfb\x43\x12\x06\x7c\x40\x50\x1b\x82\x7d\x1c\x11\xcc\x00\x6f\x0c\x47\x18\x3a\x00\x5d\xd7\xf8\x31\x28\x79\x5a\xc0\xb0\xb6\x97\xeb\x06\x86\x9c\x68\x02\xd0\x86\x5d\x68\xb8\x7a\x3f\x88\x2b\x1a\x28\x30\x04\x39\x9a\x8b\x29\x06\xa9\xa7\x3f\xc4\x2b\x0e\xc9\xfe\x2c\xa1\xc3\x1a\xf4\x64\x7e\x50\x06\xc5\xc1\x27\x1c\x02\x40\x5f\x38\x7c\xc6\x3e\x2e\x88\x39\x64\xbb\xa1\x24\xa7\xc1\x0c\x0d\x1e\xf6\x2a\x3f\xa8\xe3\x60\x94\xf9\xd8\xe0\xd0\xea\x0e\xd7\xea\x2e\xcd\x80\xba\x70\x48\xc1\x40\x50\xf8\xa1\xfb\xa9\x34\xf3\x43\xed\xff\x14\xd9\xa7\x53\xcc\xc3\x23\xc2\x29\x7a\x9e\x8d\x5e\xfe\xb4\x31\xe2\x54\xff\xf7\xd4\x92\xfd\x7c\x6a\xb9\xf5\x07\xa8\xfe\xf0\x0f\x50\x3f\x32\x52\xdc\x37\xc0\x3e\xb4\xfe\xde\x9a\x3e\x6a\xd6\x53\x0b\xfa\xa8\xe0\x9b\x6a\x3e\xe1\x6f\x7b\xf7\x95\xf2\x51\x0d\xa7\xd7\xf1\xa9\x51\x78\xd6\x22\x3e\xc9\x6d\x5f\xc1\xfc\x7b\xeb\xb7\x08\x53\x9e\x96\xc9\xff\xa2\x7e\x7f\xac\x2b\x62\xc8\xab\x43\x1a\x1a\xdd\xb1\x0c\x5d\x31\xa1\xcf\x0d\x60\x7b\xe3\x3f\xfb\xe0\x18\x97\xf9\xcf\x91\x46\xd3\xe7\x90\x34\xa3\xe3\xaa\x91\xf4\xe9\xc9\xc9\xd1\x74\x2c\xc5\x91\x32\x2a\xa9\x6b\xc8\x8a\x3a\x4c\xe4\x3f\x93\xb8\xcf\xa7\x90\x97\xd1\xa7\x0b\x1c\x2d\xb1\xdf\x75\xde\xd4\x7f\xbe\xab\xa8\xc3\xba\x0e\x9d\xd0\x27\x8b\xc2\xd0\xf1\x36\x2f\xe8\x93\x15\x74\xc9\xea\xbf\x01\x00\x00\xff\xff\x9b\x2b\xba\xa5\x00\x20\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1598222871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql":                   _000001_init_schemaDownSql,
	"000001_init_schema.up.sql":                     _000001_init_schemaUpSql,
	"000002_divide_interaction_read_state.down.sql": _000002_divide_interaction_read_stateDownSql,
	"000002_divide_interaction_read_state.up.sql":   _000002_divide_interaction_read_stateUpSql,
	"000003_rename_prefSet_to_engine.down.sql":      _000003_rename_prefset_to_engineDownSql,
	"000003_rename_prefSet_to_engine.up.sql":        _000003_rename_prefset_to_engineUpSql,
	"bindata.go":                                    bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql":                   &bintree{_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql":                     &bintree{_000001_init_schemaUpSql, map[string]*bintree{}},
	"000002_divide_interaction_read_state.down.sql": &bintree{_000002_divide_interaction_read_stateDownSql, map[string]*bintree{}},
	"000002_divide_interaction_read_state.up.sql":   &bintree{_000002_divide_interaction_read_stateUpSql, map[string]*bintree{}},
	"000003_rename_prefSet_to_engine.down.sql":      &bintree{_000003_rename_prefset_to_engineDownSql, map[string]*bintree{}},
	"000003_rename_prefSet_to_engine.up.sql":        &bintree{_000003_rename_prefset_to_engineUpSql, map[string]*bintree{}},
	"bindata.go":                                    &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
